<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.api.manager.db.board.mapper.BoardMapper">

    <select id="selectBoard" resultType="kr.co.api.manager.db.board.model.DataModel">
        SELECT
              board_no
              , board_kind
              , board_title
              , board_content
              , board_writer
            --  , reply_no
              , reply_content
              , reply_sort
              , reply_depth
              , reg_date
              , chg_date
              , board_img_url
              , board_img_origin_nm
              , board_img_destination_nm
        FROM board
        WHERE 1 = 1
        ORDER BY board_no DESC, reply_sort ASC
        LIMIT 10
    </select>

    <insert id="insertBoard" parameterType="kr.co.api.manager.db.board.model.BoardModel">
        INSERT INTO board (board_kind, board_no, board_title, board_content, board_writer, reg_date, chg_date , board_img_url, board_img_origin_nm, board_img_destination_nm)
        VALUES (
                #{boardKind}
                , (SELECT IFNULL(MAX(b.board_no)+1, 0) FROM board b WHERE b.board_kind = #{boardKind})
                , #{boardTitle}
                , #{boardContent}
                , #{boardWriter}
                , NOW()
                , NOW()
                , #{boardImgUrl}
                , #{boardImgOriginNm}
                , #{boardImgDestinationNm}
                )
    </insert>

    <!--
    댓글의 댓글이면 댓글의 현재 깊이 값을 넘겨야함 그래야 +1함
    -->
    <insert id="insertReply" parameterType="kr.co.api.manager.db.board.model.ReplyModel">
        INSERT INTO board (board_kind, board_no, reply_content, reply_sort, reply_depth, reg_date, chg_date)
        VALUES (
                #{boardKind}
                , #{boardNo}
                , #{replyContent}
                , #{replySort}
                , #{replyDepth}
                , NOW()
                , NOW()
                )
    </insert>

    <insert id="updateTest" parameterType="kr.co.api.manager.db.test.model.Test">
        UPDATE test
        SET
            text = #{text}
        WHERE id = #{id}
    </insert>

    <delete id="deleteTest">
        DELETE FROM test WHERE id = #{id}
    </delete>

    <insert id="insertProduct" parameterType="kr.co.api.manager.db.board.model.ProductModel">
        INSERT INTO flio.product(
                     title
                    , content
                    , category_depth1
                    , category_depth2
                    , category_option
                    , sale_yn
                    , tag
                    , base_url
                    , image_url
                    , use_date
                    , purchase_kind
                    , box_yn
                    , brand
                    , purpose
                    , model_no
                    , serial_no
                    , repair_yn
                    , product_related_url
                    , uid
                    , reg_date
                    , product_price
                    , trade_kind
                    , flio_yn
        )
        VALUES(
                  #{title}
                , #{content}
                , #{categoryDepth1}
                , #{categoryDepth2}
                , #{categoryOption}
                , 'S'
                , #{tag}
                , #{baseUrl}
                , #{imageUrl}
                , #{useDate}
                , #{purchaseKind}
                , #{boxYn}
                , #{brand}
                , #{purpose}
                , #{modelNo}
                , #{serialNo}
                , #{repairYn}
                , #{productRelatedUrl}
                , #{uid}
                , CURRENT_TIMESTAMP
                , #{productPrice}
                , #{tradeKind}
                , #{flioYn}
                )
    </insert>

    <!-- product select field -->
    <sql id="productField">
            pd.product_id
            , pd.product_price
            , pd.title
            , pd.content
            , pd.category_depth1
            , pd.category_depth2
            , pd.category_option
            , pd.select_cnt
            , pd.sale_yn
            , pd.tag
            , pd.base_url
            , pd.image_url
            , pd.use_date
            , pd.purchase_kind
            , pd.box_yn
            , pd.brand
            , pd.purpose
            , pd.model_no
            , pd.serial_no
            , pd.repair_yn
            , pd.product_related_url
            , pd.uid
            , pd.reg_date
            , pd.trade_kind
            , pd.faith_yn
            , pd.flio_yn
            , pd.product_review
            , IFNULL(f.is_favorite, 'N') AS favorite_yn
    </sql>

    <!-- 상품 SELECT 정렬 관련 -->
    <sql id="productOrder">
        ORDER BY (SELECT COUNT(*) FROM favorite f WHERE pd.product_id = f.product_id AND f.is_favorite = 'Y') DESC, pd.select_cnt DESC, pd.reg_date DESC
    </sql>

    <!-- 마이페이지 -->
    <select id="mypageProduct" parameterType="String" resultType="kr.co.api.manager.db.board.model.ProductModel">
        SELECT
            <include refid="productField" />
        FROM flio.product pd
        LEFT JOIN favorite f ON f.uid = #{uid} AND pd.product_id = f.product_id
        WHERE 1 = 1
            AND pd.uid = #{uid}
        <include refid="productOrder" />
    </select>

    <!-- 구매내역 -->
    <select id="targetProduct" parameterType="String" resultType="kr.co.api.manager.db.board.model.ProductModel">
        SELECT
            <include refid="productField" />
            , fu.image_url AS user_image_url
            , fu.name      AS user_name
        FROM flio.product pd
        INNER JOIN flio.flio_user fu ON pd.target_uid = fu.uid
        LEFT JOIN favorite f ON f.uid = #{uid} AND pd.product_id = f.product_id
        WHERE 1 = 1
        AND pd.target_uid = #{targetUid}
        <include refid="productOrder" />
    </select>

    <!-- 메인페이지 -->
    <select id="mainProduct" parameterType="String" resultType="kr.co.api.manager.db.board.model.ProductModel">
        SELECT
            <include refid="productField" />
        FROM flio.product pd
        LEFT JOIN favorite f ON f.uid = #{uid} AND pd.product_id = f.product_id
        WHERE 1 = 1
        <include refid="productOrder" />
    </select>

    <!-- 추천매물 -->
    <select id="recommendProduct" parameterType="String" resultType="kr.co.api.manager.db.board.model.ProductModel">
        SELECT
            <include refid="productField" />
        FROM flio.product pd
        LEFT JOIN favorite f ON f.uid = #{uid} AND pd.product_id = f.product_id
        WHERE 1 = 1
            AND pd.category_depth1 = #{categoryDepth1}
            <if test="categoryDepth2 != null">
                AND pd.category_depth2 = #{categoryDepth2}
            </if>
        <include refid="productOrder" />
    </select>

    <!-- 상세물품페이지 -->
    <select id="detailProduct" parameterType="String" resultType="kr.co.api.manager.db.board.model.ProductModel">
        SELECT
            <include refid="productField" />
            , fu.image_url AS user_image_url
            , fu.name      AS user_name
        FROM flio.product pd
        INNER JOIN flio.flio_user fu ON pd.uid = fu.uid
        LEFT JOIN favorite f ON f.uid = #{uid} AND pd.product_id = f.product_id
        WHERE 1 = 1
            AND pd.product_id = #{productId}
    </select>

    <!-- 상세물품페이지 관련매물 -->
    <select id="purposeProduct" parameterType="String" resultType="kr.co.api.manager.db.board.model.ProductModel">
        SELECT
            <include refid="productField" />
        FROM flio.product pd
        LEFT JOIN favorite f ON f.uid = #{uid} AND pd.product_id = f.product_id
        WHERE 1 = 1
            AND pd.product_id != #{productId}
            AND pd.purpose IN
            <foreach collection="purpose" index="index" open="(" close=")" separator="," item="item">
                #{item}
            </foreach>
        <include refid="productOrder" />
    </select>


    <!-- 장터태그 & 장터내용 검색 -->
    <select id="searchProduct" parameterType="String" resultType="kr.co.api.manager.db.board.model.ProductModel">
        SELECT
            <include refid="productField" />
        FROM flio.product pd
        LEFT JOIN favorite f ON f.uid = #{uid} AND pd.product_id = f.product_id
        WHERE 1 = 1
            AND
                (
                    pd.tag LIKE CONCAT('%', #{keyword}, '%')
                    OR
                    pd.content LIKE CONCAT('%', #{keyword}, '%')
                )
        <include refid="productOrder" />
    </select>

    <!-- 물품 판매완료 선택 리스트, 판매자와 채팅한 유저 목록 -->
    <select id="targetUserList" parameterType="String" resultType="kr.co.api.manager.db.board.model.TargetListModel">
        SELECT
            target.uid AS target_uid
            , target.name AS target_name
            , target.image_url AS target_image_url
        FROM chat c
        INNER JOIN flio_user target ON c.chat_target_uid = target.uid
        WHERE 1 = 1
            AND c.product_id = #{productId}
            AND c.chat_source_uid = #{sourceUid}
    </select>

    <!-- 구매자 선택 리스트에서 선택시에 판매완료로 업데이트 -->
    <update id="targetUserUpdate" parameterType="String">
        UPDATE product SET sale_yn = 'Y', target_uid = #{targetUid}
        WHERE product_id = #{productId} AND uid = #{sourceUid}
    </update>

    <!-- 구매자 판매완료 업데이트에서 사용하는 푸쉬알람 필요 데이터 -->
    <select id="targetUserUpdatePush" parameterType="String" resultType="kr.co.api.manager.db.board.model.TargetUpdatePushModel">
        SELECT
            pd.title
            , pd.base_url
            , pd.image_url
            , (SELECT fu.message_token FROM flio_user fu WHERE fu.uid = #{targetUid}) AS target_message_token
        FROM product pd
        WHERE 1 = 1
            AND pd.product_id = #{productId}
    </select>

    <!-- 구매자 후기 업데이트 -->
    <update id="targetUserReview" parameterType="String">
        UPDATE product SET product_review = #{review}
        WHERE product_id = #{productId} AND target_uid = #{targetUid}
    </update>



    <!-- 인증 검색 / 테이블 미구현 -->
    <!-- 행사 검색 / 테이블 미구현 -->
</mapper>