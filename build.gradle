// build script 라이브러리 클래스패스 추가.
buildscript {
    ext {
        domainName = "api-manager"
        // java version
        javaVersion = JavaVersion.VERSION_11
        // 해당 API에서 사용하는 Library 버전.
        projectLibraryVersion = "0.0.1-RELEASE"
        // springBoot 버전 정의.
        springBootVersion = "2.1.6.RELEASE"
        // logback version
        logbackVersion = "1.2.3"
        //lombok version
        lombokVersion = "1.18.8"
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE")
    }
}

plugins {
    id 'java'
    id 'war'
    id 'maven'
    id 'maven-publish'
    id 'idea'
    id 'org.springframework.boot' version "$springBootVersion"
}

wrapper {
    gradleVersion = "5.6.4"
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

allprojects {
    group "kr.co.api.${domainName}"
    idea{
        module{
            inheritOutputDirs = false
            outputDir = compileJava.destinationDir
            testOutputDir = compileTestJava.destinationDir
        }
    }
}

// bootWar 제거하고 war를 jar로 바꾸니 된다???
//bootWar {
//    enabled = false
//}
jar {
    enabled = true

    manifest {
        attributes 'Main-Class': 'kr.co.api.core.ApiManagerApplication'
    }
}

sourceCompatibility = "${javaVersion}"
targetCompatibility = "${javaVersion}"

// compile encoding 설정.
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

configurations {
    providedRuntime
}

configurations.all {
    // 변하는 모듈(Changing Module)을 캐시하지 않음
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

// 공통 dependency 정의.
dependencies {
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")

    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

    // spring boot web
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")

    // logback
    implementation("org.codehaus.janino:janino:3.0.15")

    // 기타
    implementation(group: 'org.modelmapper', name: 'modelmapper', version: '2.3.2')

    //swagger
    implementation("io.springfox:springfox-swagger2:2.8.0")
    implementation("io.springfox:springfox-swagger-ui:2.8.0")

    // Mybatis
    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2")
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation("mysql:mysql-connector-java:8.0.21")

    //dbcp2
    implementation("org.apache.commons:commons-dbcp2:2.7.0")

    //commons-lang3
    implementation("org.apache.commons:commons-lang3:3.4")

    //httpclient
    implementation("org.apache.httpcomponents:httpclient:4.5.12")

    // JAXB
    compile("javax.xml.bind:jaxb-api:2.3.0")

    //spring security
    //implementation("org.springframework.security:spring-security-web:4.2.1")
    //implementation("org.springframework.security:spring-security-config:4.2.1")
    implementation("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")

    //oauth
    //implementation("org.springframework.cloud:spring-cloud-starter-security:2.1.2.RELEASE")
    //implementation("org.springframework.cloud:spring-cloud-starter-oauth2:2.1.2.RELEASE")

     //Multipart File Up&Download
    implementation("org.apache.commons:commons-lang3:3.0")
    implementation("commons-io:commons-io:2.5")

    // DEV 로그설정
    compile("org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16")
}

// repositories
repositories {
    mavenCentral()
    jcenter()
}
